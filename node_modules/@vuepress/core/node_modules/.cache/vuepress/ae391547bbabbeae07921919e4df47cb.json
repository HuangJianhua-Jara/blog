{"remainingRequest":"E:\\测试个人博客2\\blog\\node_modules\\babel-loader\\lib\\index.js??ref--3-1!E:\\测试个人博客2\\blog\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!E:\\测试个人博客2\\blog\\node_modules\\vue-loader\\lib\\index.js??ref--1-1!E:\\测试个人博客2\\blog\\node_modules\\@vuepress\\markdown-loader\\index.js??ref--1-2!E:\\测试个人博客2\\blog\\blog\\README.md?vue&type=script&lang=js&","dependencies":[{"path":"E:\\测试个人博客2\\blog\\blog\\README.md","mtime":1622864910502},{"path":"E:\\测试个人博客2\\blog\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1622039384438},{"path":"E:\\测试个人博客2\\blog\\node_modules\\babel-loader\\lib\\index.js","mtime":1622039381134},{"path":"E:\\测试个人博客2\\blog\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1622039384438},{"path":"E:\\测试个人博客2\\blog\\node_modules\\vue-loader\\lib\\index.js","mtime":1622039385909},{"path":"E:\\测试个人博客2\\blog\\node_modules\\@vuepress\\markdown-loader\\index.js","mtime":1622039395414}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}