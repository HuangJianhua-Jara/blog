{"remainingRequest":"E:\\测试个人博客2\\blog\\node_modules\\vue-loader\\lib\\index.js??ref--1-1!E:\\测试个人博客2\\blog\\node_modules\\@vuepress\\markdown-loader\\index.js??ref--1-2!E:\\测试个人博客2\\blog\\blog\\README.md?vue&type=style&index=0&lang=css&","dependencies":[{"path":"E:\\测试个人博客2\\blog\\blog\\README.md","mtime":1622864910502},{"path":"E:\\测试个人博客2\\blog\\node_modules\\css-loader\\dist\\cjs.js","mtime":1622039384913},{"path":"E:\\测试个人博客2\\blog\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1622039385909},{"path":"E:\\测试个人博客2\\blog\\node_modules\\postcss-loader\\src\\index.js","mtime":1622039385487},{"path":"E:\\测试个人博客2\\blog\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1622039384438},{"path":"E:\\测试个人博客2\\blog\\node_modules\\vue-loader\\lib\\index.js","mtime":1622039385909},{"path":"E:\\测试个人博客2\\blog\\node_modules\\@vuepress\\markdown-loader\\index.js","mtime":1622039395414}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCi50eXBpbmctd29yZHN7CiAgICBkaXNwbGF5OiBibG9jazsKICAgIG1hcmdpbjogMTJyZW0gYXV0byAwOwogICAgYm90dG9tOiA0NXB4OwogICAgd2lkdGg6IDQwMHB4OwogICAgaGVpZ2h0OiAzMDBweDsKICAgIGZvbnQtc2l6ZTogMzRweDsKICAgIHRleHQtYWxpZ246IGNlbnRlcjsKICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICAgIGxlZnQ6IDUwJTsKICAgIGJvdHRvbTogNTAlOwogICAgbWFyZ2luLWxlZnQ6IC0xMHB4Owp9Ci5hbmNob3ItZG93biB7CiAgZGlzcGxheTogYmxvY2s7CiAgbWFyZ2luOiAxMnJlbSBhdXRvIDA7CiAgYm90dG9tOiA0NXB4OwogIHdpZHRoOiAyMHB4OwogIGhlaWdodDogMjBweDsKICBmb250LXNpemU6IDM0cHg7CiAgdGV4dC1hbGlnbjogY2VudGVyOwogIGFuaW1hdGlvbjogYm91bmNlLWluIDVzIDNzIGluZmluaXRlOwogIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICBsZWZ0OiA1MCU7CiAgYm90dG9tOiAzMCU7CiAgbWFyZ2luLWxlZnQ6IC0xMHB4OwogIGN1cnNvcjogcG9pbnRlcjsKfQpALXdlYmtpdC1rZXlmcmFtZXMgYm91bmNlLWluewogIDAle3RyYW5zZm9ybTp0cmFuc2xhdGVZKDApfQogIDIwJXt0cmFuc2Zvcm06dHJhbnNsYXRlWSgwKX0KICA1MCV7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTIwcHgpfQogIDgwJXt0cmFuc2Zvcm06dHJhbnNsYXRlWSgwKX0KICB0b3t0cmFuc2Zvcm06dHJhbnNsYXRlWSgwKX0KfQouYW5jaG9yLWRvd246OmJlZm9yZSB7CiAgY29udGVudDogIiI7CiAgd2lkdGg6IDIwcHg7CiAgaGVpZ2h0OiAyMHB4OwogIGRpc3BsYXk6IGJsb2NrOwogIGJvcmRlci1yaWdodDogM3B4IHNvbGlkICNmZmY7CiAgYm9yZGVyLXRvcDogM3B4IHNvbGlkICNmZmY7CiAgdHJhbnNmb3JtOiByb3RhdGUoMTM1ZGVnKTsKICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgYm90dG9tOiAxMHB4Owp9Ci5hbmNob3ItZG93bjo6YWZ0ZXIgewogIGNvbnRlbnQ6ICIiOwogIHdpZHRoOiAyMHB4OwogIGhlaWdodDogMjBweDsKICBkaXNwbGF5OiBibG9jazsKICBib3JkZXItcmlnaHQ6IDNweCBzb2xpZCAjZmZmOwogIGJvcmRlci10b3A6IDNweCBzb2xpZCAjZmZmOwogIHRyYW5zZm9ybTogcm90YXRlKDEzNWRlZyk7Cn0K"},{"version":3,"sources":["README.md"],"names":[],"mappings":";;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"README.md","sourceRoot":"blog","sourcesContent":["<template>\n<ContentSlotsDistributor :slot-key=\"$parent.slotKey\"></ContentSlotsDistributor>\n</template>\n<style>\n.typing-words{\n    display: block;\n    margin: 12rem auto 0;\n    bottom: 45px;\n    width: 400px;\n    height: 300px;\n    font-size: 34px;\n    text-align: center;\n    position: absolute;\n    left: 50%;\n    bottom: 50%;\n    margin-left: -10px;\n}\n.anchor-down {\n  display: block;\n  margin: 12rem auto 0;\n  bottom: 45px;\n  width: 20px;\n  height: 20px;\n  font-size: 34px;\n  text-align: center;\n  animation: bounce-in 5s 3s infinite;\n  position: absolute;\n  left: 50%;\n  bottom: 30%;\n  margin-left: -10px;\n  cursor: pointer;\n}\n@-webkit-keyframes bounce-in{\n  0%{transform:translateY(0)}\n  20%{transform:translateY(0)}\n  50%{transform:translateY(-20px)}\n  80%{transform:translateY(0)}\n  to{transform:translateY(0)}\n}\n.anchor-down::before {\n  content: \"\";\n  width: 20px;\n  height: 20px;\n  display: block;\n  border-right: 3px solid #fff;\n  border-top: 3px solid #fff;\n  transform: rotate(135deg);\n  position: absolute;\n  bottom: 10px;\n}\n.anchor-down::after {\n  content: \"\";\n  width: 20px;\n  height: 20px;\n  display: block;\n  border-right: 3px solid #fff;\n  border-top: 3px solid #fff;\n  transform: rotate(135deg);\n}\n</style>\n\n<script>\n\n\nexport default {\n\n  mounted () {\n    const ifJanchor = document.getElementById(\"JanchorDown\"); \n    ifJanchor && ifJanchor.parentNode.removeChild(ifJanchor);\n    let a = document.createElement('a');\n    a.id = 'JanchorDown';\n    a.className = 'anchor-down';\n    document.getElementsByClassName('hero')[0].append(a);\n    let targetA = document.getElementById(\"JanchorDown\");\n    targetA.addEventListener('click', e => { // 添加点击事件\n      this.scrollFn();\n    });\n    \n    class TextScramble {\n        constructor(el) {\n            this.el = el;\n            this.chars = \"!<>-_/[]{}—=+*^?#________\";\n            this.update = this.update.bind(this);\n        }\n        setText(newText) {\n            const oldText = this.el.innerText;\n            const length = Math.max(oldText.length, newText.length);\n            const promise = new Promise((resolve) => (this.resolve = resolve));\n            this.queue = [];\n            for (let i = 0; i < length; i++) {\n                const from = oldText[i] || \"\";\n                const to = newText[i] || \"\";\n                const start = Math.floor(Math.random() * 40);\n                const end = start + Math.floor(Math.random() * 40);\n                this.queue.push({ from, to, start, end });\n            }\n            cancelAnimationFrame(this.frameRequest);\n            this.frame = 0;\n            this.update();\n            return promise;\n        }\n        update() {\n            let output = \"\";\n            let complete = 0;\n            for (let i = 0, n = this.queue.length; i < n; i++) {\n                let { from, to, start, end, char } = this.queue[i];\n                if (this.frame >= end) {\n                    complete++;\n                    output += to;\n                } else if (this.frame >= start) {\n                    if (!char || Math.random() < 0.28) {\n                        char = this.randomChar();\n                        this.queue[i].char = char;\n                    }\n                    output += `<span class=\"dud\">${char}</span>`;\n                } else {\n                    output += from;\n                }\n            }\n            this.el.innerHTML = output;\n            if (complete === this.queue.length) {\n                this.resolve();\n            } else {\n                this.frameRequest = requestAnimationFrame(this.update);\n                this.frame++;\n            }\n        }\n        randomChar() {\n            return this.chars[Math.floor(Math.random() * this.chars.length)];\n        }\n    }\n\n    // 使用方法\n    let el = document.querySelector(\"#descText\");\n    console.log(\"el: \", el);\n    if (!el) {\n        const timer = setInterval(() => {\n            if (el) {\n                init();\n                timer && clearInterval(timer);\n            }\n            el = document.querySelector(\"#descText\");\n        }, 100);\n    } else {\n        init();\n    }\n\n    function init() {\n        const fx = new TextScramble(el);\n        const phrases = [\n            \"我是一名前端\",\n            \"爱吃小熊饼干\",\n            \"上班只为下班\",\n            \"工资刚够早餐\",\n            \"每晚都要加班\",\n            \"只求线上平安\",\n            \"头发快要掉完\",\n            \"前端真的好难\",\n            \"只是无名前端\",\n            \"写代码的憨憨\"\n        ];\n        // fx.setText('写代码的憨憨')\n        let counter = 0;\n        const next = () => {\n            fx.setText(phrases[counter]).then(() => {\n                setTimeout(next, 2000);\n            });\n            counter = (counter + 1) % phrases.length;\n        };\n        next();\n    }\n  },\n\n  methods: {\n    scrollFn() {\n      const windowH = document.getElementsByClassName('hero')[0].clientHeight; // 获取窗口高度\n      document.documentElement.scrollTop = windowH; // 滚动条滚动到指定位置\n    }\n  }\n\n}\n\n// // 打字机代码\n//       class TextScramble {\n//         constructor(el) {\n//           this.el = el;\n//           this.chars = \"!<>-_/[]{}—=+*^?#________\";\n//           this.update = this.update.bind(this);\n//         }\n//         setText(newText) {\n//           const oldText = this.el.innerText;\n//           const length = Math.max(oldText.length, newText.length);\n//           const promise = new Promise((resolve) => (this.resolve = resolve));\n//           this.queue = [];\n//           for (let i = 0; i < length; i++) {\n//             const from = oldText[i] || \"\";\n//             const to = newText[i] || \"\";\n//             const start = Math.floor(Math.random() * 40);\n//             const end = start + Math.floor(Math.random() * 40);\n//             this.queue.push({ from, to, start, end });\n//           }\n//           cancelAnimationFrame(this.frameRequest);\n//           this.frame = 0;\n//           this.update();\n//           return promise;\n//         }\n//         update() {\n//           let output = \"\";\n//           let complete = 0;\n//           for (let i = 0, n = this.queue.length; i < n; i++) {\n//             let { from, to, start, end, char } = this.queue[i];\n//             if (this.frame >= end) {\n//               complete++;\n//               output += to;\n//             } else if (this.frame >= start) {\n//               if (!char || Math.random() < 0.28) {\n//                 char = this.randomChar();\n//                 this.queue[i].char = char;\n//               }\n//               output += `<span class=\"dud\">${char}</span>`;\n//             } else {\n//               output += from;\n//             }\n//           }\n//           this.el.innerHTML = output;\n//           if (complete === this.queue.length) {\n//             this.resolve();\n//           } else {\n//             this.frameRequest = requestAnimationFrame(this.update);\n//             this.frame++;\n//           }\n//         }\n//         randomChar() {\n//           return this.chars[Math.floor(Math.random() * this.chars.length)];\n//         }\n//       }\n\n//       // 使用方法\n//       let el = document.querySelector(\"#descText\");\n//       console.log(\"el: \", el);\n//       if (!el) {\n//         const timer = setInterval(() => {\n//           if (el) {\n//             init();\n//             timer && clearInterval(timer);\n//           }\n//           el = document.querySelector(\"#descText\");\n//         }, 100);\n//       } else {\n//         init();\n//       }\n\n//       function init() {\n//         const fx = new TextScramble(el);\n//         const phrases = [\n//           \"我是一名前端\",\n//           \"爱吃小熊饼干\",\n//           \"上班只为下班\",\n//           \"工资刚够早餐\",\n//           \"每晚都要加班\",\n//           \"只求线上平安\",\n//           \"头发快要掉完\",\n//           \"前端真的好难\",\n//           \"只是无名前端\",\n//           \"写代码的憨憨\"\n//         ];\n//         // fx.setText('写代码的憨憨')\n//         let counter = 0;\n//         const next = () => {\n//           fx.setText(phrases[counter]).then(() => {\n//             setTimeout(next, 2000);\n//           });\n//           counter = (counter + 1) % phrases.length;\n//         };\n//         next();\n//       }\n</script>\n\n\n"]}]}